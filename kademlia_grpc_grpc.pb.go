// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: kademlia_grpc.proto

package knp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KademliaService_Ping_FullMethodName      = "/knp.KademliaService/Ping"
	KademliaService_Store_FullMethodName     = "/knp.KademliaService/Store"
	KademliaService_FindValue_FullMethodName = "/knp.KademliaService/FindValue"
	KademliaService_FindNode_FullMethodName  = "/knp.KademliaService/FindNode"
)

// KademliaServiceClient is the client API for KademliaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KademliaServiceClient interface {
	Ping(ctx context.Context, in *PingArgs, opts ...grpc.CallOption) (*PingReply, error)
	Store(ctx context.Context, in *StoreArgs, opts ...grpc.CallOption) (*StoreReply, error)
	FindValue(ctx context.Context, in *FindValueArgs, opts ...grpc.CallOption) (*FindValueReply, error)
	FindNode(ctx context.Context, in *FindNodeArgs, opts ...grpc.CallOption) (*FindNodeReply, error)
}

type kademliaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKademliaServiceClient(cc grpc.ClientConnInterface) KademliaServiceClient {
	return &kademliaServiceClient{cc}
}

func (c *kademliaServiceClient) Ping(ctx context.Context, in *PingArgs, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, KademliaService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) Store(ctx context.Context, in *StoreArgs, opts ...grpc.CallOption) (*StoreReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreReply)
	err := c.cc.Invoke(ctx, KademliaService_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) FindValue(ctx context.Context, in *FindValueArgs, opts ...grpc.CallOption) (*FindValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindValueReply)
	err := c.cc.Invoke(ctx, KademliaService_FindValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kademliaServiceClient) FindNode(ctx context.Context, in *FindNodeArgs, opts ...grpc.CallOption) (*FindNodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNodeReply)
	err := c.cc.Invoke(ctx, KademliaService_FindNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KademliaServiceServer is the server API for KademliaService service.
// All implementations must embed UnimplementedKademliaServiceServer
// for forward compatibility
type KademliaServiceServer interface {
	Ping(context.Context, *PingArgs) (*PingReply, error)
	Store(context.Context, *StoreArgs) (*StoreReply, error)
	FindValue(context.Context, *FindValueArgs) (*FindValueReply, error)
	FindNode(context.Context, *FindNodeArgs) (*FindNodeReply, error)
	mustEmbedUnimplementedKademliaServiceServer()
}

// UnimplementedKademliaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKademliaServiceServer struct {
}

func (UnimplementedKademliaServiceServer) Ping(context.Context, *PingArgs) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedKademliaServiceServer) Store(context.Context, *StoreArgs) (*StoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedKademliaServiceServer) FindValue(context.Context, *FindValueArgs) (*FindValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedKademliaServiceServer) FindNode(context.Context, *FindNodeArgs) (*FindNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedKademliaServiceServer) mustEmbedUnimplementedKademliaServiceServer() {}

// UnsafeKademliaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KademliaServiceServer will
// result in compilation errors.
type UnsafeKademliaServiceServer interface {
	mustEmbedUnimplementedKademliaServiceServer()
}

func RegisterKademliaServiceServer(s grpc.ServiceRegistrar, srv KademliaServiceServer) {
	s.RegisterService(&KademliaService_ServiceDesc, srv)
}

func _KademliaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).Ping(ctx, req.(*PingArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).Store(ctx, req.(*StoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_FindValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindValueArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).FindValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_FindValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).FindValue(ctx, req.(*FindValueArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KademliaService_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KademliaService_FindNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).FindNode(ctx, req.(*FindNodeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// KademliaService_ServiceDesc is the grpc.ServiceDesc for KademliaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KademliaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knp.KademliaService",
	HandlerType: (*KademliaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _KademliaService_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _KademliaService_Store_Handler,
		},
		{
			MethodName: "FindValue",
			Handler:    _KademliaService_FindValue_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _KademliaService_FindNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kademlia_grpc.proto",
}
